#!/usr/bin/env bash

# WARNING: this script will erase everything on the intended disk. Use with caution!

set -e

boot_size=512 #MiB
device="/dev/sda"
hostname="archbxuse"
locale="en_US"

percent_space_arch=100 # %

customSetting() {
  echo "enter disk name:"
  read device
  echo "enter disk size (percentage):"
  read percent_space_arch # TODO: defaults to 100%
  echo "enter root password:"
  read -s password
  echo "confirm root password:"
  read -s password_conf

  if [ $password == $password_conf ]
  then
    echo ""
  else
    echo "passwords do not match, exiting"
    exit 2
  fi

  echo "enter username:"
  read user
  echo "enter userpassword:"
  read -s userpass
  echo "confirm userpassword:"
  read -s userpass_conf

  if [ $userpass == $userpass_conf ]
  then
    echo ""
  else
    echo "passwords do not match, exiting"
    exit 2
  fi

  if [ $device == "/dev/nvme0n1" ]
  then
    part_boot="${device}p1"
    part_root="${device}p2"
  else
    part_boot="${device}1"
    part_root="${device}2"
  fi
}

confirmation() {
  echo ""
  echo "####################################"
  echo "########### Confirmation ###########"
  echo "####################################"
  echo ""
  lsblk
  echo "${percent_space_arch}% of $device will be used for installing Arch Linux"
  echo "Are you sure you want to preceed? [y/N] "
  read ans
  if [ $ans != "y" ]
  then
    echo "aborted, exiting..."
    exit 4
  fi
}


#### Erase empty disk ####
eraseDisk() {
  cryptsetup open --type plain -d /dev/urandom ${device} to_be_wiped
  dd if=/dev/zero of=/dev/mapper/to_be_wiped status=progress &2> /dev/null
  cryptsetup close to_be_wiped
}

#### Create full disk encryption ####
encryptDisk() {

  parted --script "${device}" -- mklabel gpt \
    mkpart ESP fat32 1MiB ${boot_size}MiB \
    set 1 boot on \
    mkpart primary ext4 $(($boot_size + 1))MiB ${percent_space_arch}%

  cryptsetup luksFormat ${part_root} # sda2 contains the system(excluding the boot partition)
  cryptsetup open ${part_root} cryptlvm

  ram_size=$(free --mebi | grep Mem | awk '{print $2}')
  swap_size=$(printf '%.0f' "$((ram_size * 3 / 2))") # MiB

  pvcreate /dev/mapper/cryptlvm # create logical volumes
  vgcreate MyVolGroup /dev/mapper/cryptlvm
  lvcreate -L ${swap_size}m MyVolGroup -n swap
  lvcreate -l 100%FREE MyVolGroup -n root

  mkfs.fat -F32 "${part_boot}"

  mkfs.ext4 /dev/MyVolGroup/root
  mkswap /dev/MyVolGroup/swap

  mount /dev/MyVolGroup/root /mnt
  swapon /dev/MyVolGroup/swap

}

#### Mount disks ####
mountDisks() {
  mkdir /mnt/boot
  mount ${part_boot} /mnt/boot
}

##### pacstrap
addLocalPackages() {
sed -i '/\[community\]\|\[core\]\|\[extra\]/,+1 s/^/#/' /etc/pacman.conf
cat >> /etc/pacman.conf << EOF
[custom-official]
SigLevel = Optional TrustAll
Server = file:///root/official-repo
EOF

pacman -Syy
}

installArch() {
  pacstrap /mnt base base-devel linux linux-firmware systemd mkinitcpio lvm2 neovim git grub efibootmgr intel-ucode os-prober networkmanager zsh
}

##### generate hostname, host ip, locale(remember to update the en_US with a var) # TODO: can be done inside chroot
setHostInfo() {
  sed -i '/^#.*en_US/s/^#//' /mnt/etc/locale.gen
  echo "${hostname}" >> /mnt/etc/hostname
  echo "LANG=en_US.UTF-8" >> /mnt/etc/locale.conf
  cat >> /mnt/etc/hosts << EOF
127.0.0.1 localhost
::1 localhost
127.0.0.1 $hostname.localdomain $hostname
EOF

##### generate fstab config file
genfstab -U /mnt >> /mnt/etc/fstab

###### grub, hardware clock
(
echo "timedatectl set-ntp 1"
echo "sed -i 's/\#Color/Color/g' /etc/pacman.conf"
echo useradd $user -m -G wheel
# echo "echo -e \"${userpass}\n${userpass}\" | passwd $user"
# FIXME:need no passwd fist
echo "echo \"%wheel ALL=(ALL) NOPASSWD: ALL #AURTEMP\" >> /etc/sudoers"

echo "chsh -s /usr/bin/zsh $user"

echo ln -sf /usr/share/zoneinfo/US/Pacific /etc/localtime
echo hwclock --systohc
echo locale-gen
echo touch /etc/vconsole.conf
) | arch-chroot /mnt
}


installGrub() {
# grab the UUID of the system partition NOTE: check if it is labled. if so, awk will need to print the 5th column instead of the 4th
device_UUID=$(lsblk -f | grep $(echo $part_root | sed "s/^.*\/\(.*$\)/\1/g") | awk '{print $4}' )
(
echo mkdir /boot/grub
echo "sed -i 's/^HOOKS=(base udev autodetect.*\$/HOOKS=(base systemd autodetect keyboard sd-vconsole modconf block sd-encrypt lvm2 filesystems fsck)/g' /etc/mkinitcpio.conf"
echo mkinitcpio -P 
echo "sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT=\"\(.*\)\"\$/GRUB_CMDLINE_LINUX_DEFAULT=\"\1 rd.luks.name=${device_UUID}=cryptlvm root=\/dev\/MyVolGroup\/root\"/' /etc/default/grub"

echo grub-mkconfig -o /boot/grub/grub.cfg
echo grub-install --target=x86_64-efi --efi-directory=/boot
) | arch-chroot /mnt
}


installPackages() {
  cp -r ~/official-repo ~/aur-packages ~/dots ~/bootstrap /mnt/root/
(
echo "
sed -i '/\[community\]\|\[core\]\|\[extra\]/,+1 s/^/#/' /etc/pacman.conf
cat >>/etc/pacman.conf <<EOF

[custom-official]
SigLevel = Optional TrustAll
Server = file:///root/official-repo

EOF

pacman -Syu
"

echo "pacman -S --noconfirm plasma xorg-server xorg-xinit sddm-kcm alacritty rsync exa bat tmux unzip xclip xsel pass ncdu dolphin unclutter noto-fonts-emoji sxiv zathura-pdf-mupdf adobe-source-han-sans-otc-fonts adobe-source-han-serif-otc-fonts bluez-utils fd neofetch htop ripgrep plocate fzf ksysguard okular mpv lsof man-db zbar spectacle tumbler trash-cli elisa zip pulseaudio-bluetooth bc android-tools python-pip ueberzug capitaine-cursors sdcv kcm-fcitx fcitx-sunpinyin gimp kdeconnect syncthing make cmake gcc gettext extra-cmake-modules qt5-tools qt5-x11extras kcrash kglobalaccel kde-dev-utils kio knotifications kinit kwin kvantum
"
# Deps for aur
echo "pacman -S --noconfirm alsa-lib gtk3 libxss nss ttf-font glibc libinput cairo systemd-libs libx11 libxi libxrandr libxtst pugixml glib2 libdrm pango"
echo "pacman -U --noconfirm ~/aur-packages/*.tar.zst"
echo "systemctl enable NetworkManager"
echo "systemctl enable touchegg"
echo "systemctl enable sddm"
echo "updatedb"
) | arch-chroot /mnt
}

installConfig() {
  (
  # mv items
  echo "mv /root/dots /root/bootstrap /home/$user/"
  echo "chown -R $user:wheel /home/$user/dots /home/$user/bootstrap"
  echo "su - $user bash -c \"rsync -av --remove-source-files /home/$user/dots/ /home/$user/; mkdir /home/$user/.cache/zsh \""
  echo "mv /home/$user/.local/share/themes/Orchis-dark /usr/share/themes/ && sudo rmdir /home/$user/.local/share/themes"
  echo "mv /home/$user/.local/share/stardict /usr/share"

  # clean up
  echo "
  rm /home/$user/README.md
  rm /home/$user/.gitignore
  rm -rf /home/$user/dots
  rm -rf /home/$user/.git
  rm -rf /home/$user/.gitmodules

  sed -i '/\[community\]\|\[core\]\|\[extra\]/,+1 s/^\#//' /etc/pacman.conf
  sed -i '/\[custom-official\]/,+2 s/^/#/' /etc/pacman.conf
  sed -i '/#AURTEMP/d' /etc/sudoers

  echo \"%wheel ALL=(ALL) ALL
  %wheel ALL=(ALL) NOPASSWD: /usr/bin/shutdown,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/wifi-menu,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman -Syu,/usr/bin/pacman -Syyu,/usr/bin/packer -Syu,/usr/bin/packer -Syyu,/usr/bin/systemctl restart NetworkManager,/usr/bin/rc-service NetworkManager restart,/usr/bin/pacman -Syyu --noconfirm,/usr/bin/loadkeys,/usr/bin/paru,/usr/bin/pacman -Syyuw --noconfirm\" >> /etc/sudoers
  "
  
  ) | arch-chroot /mnt

}

setRoundedCorners() {
  echo "su - $user bash -c \"
  cd /home/$user/.local/src/public-repos
  cd LightlyShaders2; mkdir qt5build; cd qt5build; cmake ../ -DCMAKE_INSTALL_PREFIX=/usr && make && sudo make install
  \"" | arch-chroot /mnt
}

setSDDM() {
  echo "
  mkdir /etc/sddm.conf.d

cat >> /etc/sddm.conf.d/kde_settings.conf << EOF
[Autologin]
Relogin=false
Session=
User=

[General]
HaltCommand=/usr/bin/systemctl poweroff
RebootCommand=/usr/bin/systemctl reboto

[Theme]
Current=breeze

[Users]
MaximumUid=60513
MinimumUid=1000

EOF
  
  " | arch-chroot /mnt
}

setGrubTheme() {
  echo "
  /home/$user/.local/src/public-repos/matter/matter.py -i arch arch arch arch laptop -ff /home/$user/.local/share/fonts/victor-pixel.ttf -fn victor -fs 40
  " | arch-chroot /mnt
}

# does not work in VM 
setPlymouth() {
  echo "
  sed -i 's/^HOOKS=(base systemd/HOOKS=(base systemd sd-plymouth/g' /etc/mkinitcpio.conf
  mkinitcpio -P
  systemctl disable sddm
  systemctl enable sddm-plymouth
  " | arch-chroot /mnt
}

install() {
  customSetting
  confirmation
  # eraseDisk # FIXME: causes the disk unable to work with in VBox
  encryptDisk
  mountDisks
  addLocalPackages
  installArch
  setHostInfo
  ###### add a password
  echo "root:$password" | chpasswd --root /mnt
  echo "$user:$userpass" | chpasswd --root /mnt
  installGrub
  installPackages
  installConfig
  setRoundedCorners
  setSDDM
  setGrubTheme
  # setPlymouth
}

install

echo "Finished with installation"
