#!/usr/bin/env bash

set -e

# TODO: need to verify the name
# TODO: verify internet connection
# TODO: disk encryption
# TODO: i386 for grub?
# TODO: dynamic swap size for different ram sizes
# TODO: no confirm

boot_size=512 #MiB

device="/dev/sda"

hostname="archbxuse"
locale="en_US"

customSetting() {
  echo "enter disk name:"
  read device
  echo "enter password:"
  read -s password
}

if [ $device == "/dev/nvme0n1" ]
then
  part_boot="${device}p1"
  part_root="${device}p2"
else
  part_boot="${device}1"
  part_root="${device}2"
fi

#### Erase empty disk ####
eraseDisk() {
  cryptsetup open --type plain -d /dev/urandom ${device} to_be_wiped
  dd if=/dev/zero of=/dev/mapper/to_be_wiped status=progress &2> /dev/null
  cryptsetup close to_be_wiped
}

#### Create full disk encryption ####
encryptDisk() {

  parted --script "${device}" -- mklabel gpt \
    mkpart ESP fat32 1MiB ${boot_size}MiB \
    set 1 boot on \
    mkpart primary ext4 $(($boot_size + 1))MiB 100%

  cryptsetup luksFormat ${part_root} # sda2 contains the system(excluding the boot partition)
  cryptsetup open ${part_root} cryptlvm

  ram_size=$(free --mebi | grep Mem | awk '{print $2}')
  swap_size=$(printf '%.0f' "$((ram_size * 3 / 2))") # MiB

  pvcreate /dev/mapper/cryptlvm # create logical volumes
  vgcreate MyVolGroup /dev/mapper/cryptlvm
  lvcreate -L ${swap_size}m MyVolGroup -n swap
  lvcreate -l 100%FREE MyVolGroup -n root

  mkfs.fat -F32 "${part_boot}"

  mkfs.ext4 /dev/MyVolGroup/root
  mkswap /dev/MyVolGroup/swap

  mount /dev/MyVolGroup/root /mnt
  swapon /dev/MyVolGroup/swap

}

#### Mount disks ####
mountDisks() {
  mkdir /mnt/boot
  mount ${part_boot} /mnt/boot
}

##### pacstrap
installArch() {
  pacman -Syy
  pacstrap /mnt base base-devel linux linux-firmware systemd mkinitcpio lvm2 neovim git grub efibootmgr intel-ucode os-prober networkmanager zsh
}

##### generate hostname, host ip, locale(remember to update the en_US with a var)
setHostInfo() {
  sed -i '/^#.*en_US/s/^#//' /mnt/etc/locale.gen
  echo "${hostname}" >> /mnt/etc/hostname
  echo "LANG=en_US.UTF-8" >> /mnt/etc/locale.conf
  cat >> /mnt/etc/hosts << EOF
127.0.0.1 localhost
::1 localhost
127.0.0.1 $hostname.localdomain $hostname
EOF

##### generate fstab config file
genfstab -U /mnt >> /mnt/etc/fstab

# update time TODO: make it dynamic by automatically select local time. or else a default one

# grab the UUID of the system partition TODO: check if it is labled. if so, awk will need to print the 5th column instead of the 4th
device_UUID=$(lsblk -f | grep $(echo $part_root | sed "s/^.*\/\(.*$\)/\1/g") | awk '{print $4}' )

###### grub, hardware clock
(
echo ln -sf /usr/share/zoneinfo/US/Pacific /etc/localtime
echo hwclock --systohc
echo locale-gen
echo mkdir /boot/grub

echo touch /etc/vconsole.conf
echo "sed -i 's/^HOOKS=(base udev autodetect.*\$/HOOKS=(base systemd autodetect keyboard sd-vconsole modconf block sd-encrypt lvm2 filesystems fsck)/g'" /etc/mkinitcpio.conf
echo mkinitcpio -P 
echo "sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT=\"\(.*\)\"\$/GRUB_CMDLINE_LINUX_DEFAULT=\"\1 rd.luks.name=${device_UUID}=cryptlvm root=\/dev\/MyVolGroup\/root\"/' /etc/default/grub"

echo grub-mkconfig -o /boot/grub/grub.cfg
echo grub-install --target=x86_64-efi --efi-directory=/boot
) | arch-chroot /mnt

}

install() {
  customSetting
  # eraseDisk # TODO:buggy
  encryptDisk
  mountDisks
  installArch
  setHostInfo
  ###### add a password
  echo "root:$password" | chpasswd --root /mnt
}

install

echo "Finished with installation"
